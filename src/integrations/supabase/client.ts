// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { mockSupabase, isOfflineMode } from '@/utils/mockData';

// Get Supabase configuration from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "";

// Get additional configuration from environment
const API_TIMEOUT = parseInt(import.meta.env.VITE_API_TIMEOUT || '30000');
const DEBUG_MODE = import.meta.env.VITE_DEBUG_MODE === 'true';
const APP_ENV = import.meta.env.VITE_APP_ENV || 'development';

// Check if we have valid Supabase configuration
const hasValidSupabaseConfig = SUPABASE_URL &&
    SUPABASE_PUBLISHABLE_KEY &&
    SUPABASE_URL !== 'https://demo-project.supabase.co' &&
    SUPABASE_URL.includes('.supabase.co');

// Log configuration in development mode
if (DEBUG_MODE) {
    console.log('üîß Supabase Configuration:', {
        hasValidConfig: hasValidSupabaseConfig,
        url: SUPABASE_URL,
        environment: APP_ENV,
        timeout: API_TIMEOUT,
        isOffline: isOfflineMode(),
        keyPrefix: SUPABASE_PUBLISHABLE_KEY ? SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...' : 'Not provided'
    });
}

// Create Supabase client or use mock client
export const supabase = hasValidSupabaseConfig ?
    createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
        auth: {
            persistSession: true,
            autoRefreshToken: true,
            detectSessionInUrl: true,
            flowType: 'pkce'
        },
        realtime: {
            params: {
                eventsPerSecond: 10
            }
        },
        global: {
            headers: {
                'X-Client-Info': `mobile-book-verse-reader-${APP_ENV}`,
                'X-App-Version': import.meta.env.VITE_APP_VERSION || '1.0.0'
            },
            fetch: (url, options = {}) => {
                // Add timeout to all requests
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);

                return fetch(url, {
                    ...options,
                    signal: controller.signal,
                }).finally(() => {
                    clearTimeout(timeoutId);
                });
            }
        }
    }) : mockSupabase as unknown as ReturnType<typeof createClient<Database>>;

// Connection health check utility
export const checkSupabaseConnection = async (): Promise<boolean> => {
    try {
        // If using mock client, always return true
        if (!hasValidSupabaseConfig) {
            if (DEBUG_MODE) {
                console.log('üß™ Using mock Supabase client - connection is always "healthy"');
            }
            return true;
        }

        const { data, error } = await supabase
            .from('interactive_stories')
            .select('id')
            .limit(1);

        if (error) {
            console.error('‚ùå Supabase health check failed:', error);
            return false;
        }

        if (DEBUG_MODE) {
            console.log('‚úÖ Supabase connection healthy');
        }
        return true;
    } catch (error) {
        console.error('‚ùå Supabase connection error:', error);
        return false;
    }
};

// Initialize connection check
checkSupabaseConnection();